}
} else if(surveyResults$preference[i] == "Equal"){
if(surveyResults$secondGenerator[i] == "randomLevelGenerator"){
if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
imprVSrandom_equal = imprVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSrandom_equal = gaVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSrandom_equal = mctsVSrandom_equal +1;
}
}else if(surveyResults$secondGenerator[i] == "improvedConstructiveLevelGenerator") {
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
imprVSrandom_equal = imprVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSimpr_equal = gaVSimpr_equal +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSimpr_equal = mctsVSimpr_equal +1;
}
}else if(surveyResults$secondGenerator[i] == "geneticLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
gaVSrandom_equal = gaVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
gaVSimpr_equal = gaVSimpr_equal +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSga_equal = mctsVSga_equal +1;
}
}else if(surveyResults$secondGenerator[i] == "mctsLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
mctsVSrandom_equal = mctsVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
mctsVSimpr_equal = mctsVSimpr_equal +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
mctsVSga_equal = mctsVSga_equal +1;
}
}
}else if(surveyResults$preference[i] == "Neither"){
if(surveyResults$secondGenerator[i] == "randomLevelGenerator"){
if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
imprVSrandom_neither = imprVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSrandom_neither = gaVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSrandom_neither = mctsVSrandom_neither +1;
}
}else if(surveyResults$secondGenerator[i] == "improvedConstructiveLevelGenerator") {
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
imprVSrandom_neither = imprVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSimpr_neither = gaVSimpr_neither +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSimpr_neither = mctsVSimpr_neither +1;
}
}else if(surveyResults$secondGenerator[i] == "geneticLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
gaVSrandom_neither = gaVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
gaVSimpr_neither = gaVSimpr_neither +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSga_neither = mctsVSga_neither +1;
}
}else if(surveyResults$secondGenerator[i] == "mctsLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
mctsVSrandom_neither = mctsVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
mctsVSimpr_neither = mctsVSimpr_neither +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
mctsVSga_neither = mctsVSga_neither +1;
}
}
}
}
imprVSrandom <- imprVSrandom_notPref + imprVSrandom_pref
gaVSrandom <- gaVSrandom_notPref + gaVSrandom_pref
mctsVSrandom <- mctsVSrandom_notPref + mctsVSrandom_pref
gaVSimpr <- gaVSimpr_notPref + gaVSimpr_pref
mctsVSimpr <- mctsVSimpr_notPref + mctsVSimpr_pref
mctsVSga <- mctsVSga_notPref + mctsVSga_pref
binom.test(imprVSrandom_pref,imprVSrandom,(1/2),alternative="two.sided")
binom.test(gaVSrandom_pref,gaVSrandom,(1/2),alternative="two.sided")
binom.test(mctsVSrandom_pref,mctsVSrandom,(1/2),alternative="two.sided")
binom.test(gaVSimpr_pref,gaVSimpr,(1/2),alternative="two.sided")
binom.test(mctsVSimpr_pref,mctsVSimpr,(1/2),alternative="two.sided")
binom.test(mctsVSga_pref,mctsVSga,(1/2),alternative="two.sided")
#boxplot(maxValues)
#boxplot(evalValues)
#boxplot(durValues)
means <- sapply(durValues, mean)
stdev <- sqrt(sapply(durValues, var))
n     <- sapply(durValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(durValues$durMCTS)
#maxDurMCTS_tmp <- max(durValues$durMCTS)
require(plotrix)
#boxplot(durValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Duration (in minutes)",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means
means <- sapply(evalValues, mean)
stdev <- sqrt(sapply(evalValues, var))
n     <- sapply(evalValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(evalValues$durMCTS)
#maxDurMCTS_tmp <- max(evalValues$durMCTS)
require(plotrix)
#boxplot(evalValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means
View(input)
View(evalValues)
means <- sapply(evalValues, mean)
stdev <- sqrt(sapply(evalValues, var))
n     <- sapply(evalValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(evalValues$durMCTS)
#maxDurMCTS_tmp <- max(evalValues$durMCTS)
require(plotrix)
#boxplot(evalValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means
means <- sapply(maxValues, mean)
stdev <- sqrt(sapply(maxValues, var))
n     <- sapply(maxValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(maxValues$durMCTS)
#maxDurMCTS_tmp <- max(maxValues$durMCTS)
require(plotrix)
#boxplot(maxValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),ylab="Highest score",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means
means <- sapply(maxValues, mean)
stdev <- sqrt(sapply(maxValues, var))
n     <- sapply(maxValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(maxValues$durMCTS)
#maxDurMCTS_tmp <- max(maxValues$durMCTS)
require(plotrix)
#boxplot(maxValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),ylab="Highest score",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
knitr::opts_chunk$set(echo = TRUE)
source("functions.R")
setwd("/Users/eric/git/gvgai/experiments")
items <- list()
items[[1]] <- c("MCTS")
items[[2]] <- c("NMCS")
items[[3]] <- c("NRPA")
folderZelda <- c("zelda_300min/")
folderSokoban <- c("sokoban_300min/")
folderAliens <- c("aliens_300min/")
folderFrogs <- c("frogs_300min/")
resZelda <- loadJavaCSV(folderZelda,items)
resSokoban <- loadJavaCSV(folderSokoban,items)
resAliens <- loadJavaCSV(folderAliens,items)
resFrogs <- loadJavaCSV(folderFrogs,items)
maxMCTS <- c()
maxMCTS <- c(maxMCTS, getMaxValues(resZelda$MCTS))
maxMCTS <- c(maxMCTS, getMaxValues(resSokoban$MCTS))
maxMCTS <- c(maxMCTS, getMaxValues(resAliens$MCTS))
maxMCTS <- c(maxMCTS, getMaxValues(resFrogs$MCTS))
maxNMCS <- c()
maxNMCS <- c(maxNMCS, getMaxValues(resZelda$NMCS))
maxNMCS <- c(maxNMCS, getMaxValues(resSokoban$NMCS))
maxNMCS <- c(maxNMCS, getMaxValues(resAliens$NMCS))
maxNMCS <- c(maxNMCS, getMaxValues(resFrogs$NMCS))
maxNRPA <- c()
maxNRPA <- c(maxNRPA, getMaxValues(resZelda$NRPA))
maxNRPA <- c(maxNRPA, getMaxValues(resSokoban$NRPA))
maxNRPA <- c(maxNRPA, getMaxValues(resAliens$NRPA))
maxNRPA <- c(maxNRPA, getMaxValues(resFrogs$NRPA))
maxValues <- data.frame(maxMCTS, maxNMCS, maxNRPA)
evalMCTS <- c()
evalMCTS <- c(evalMCTS, getEvalValues(resZelda$MCTS))
evalMCTS <- c(evalMCTS, getEvalValues(resSokoban$MCTS))
evalMCTS <- c(evalMCTS, getEvalValues(resAliens$MCTS))
evalMCTS <- c(evalMCTS, getEvalValues(resFrogs$MCTS))
evalNMCS <- c()
evalNMCS <- c(evalNMCS, getEvalValues(resZelda$NMCS))
evalNMCS <- c(evalNMCS, getEvalValues(resSokoban$NMCS))
evalNMCS <- c(evalNMCS, getEvalValues(resAliens$NMCS))
evalNMCS <- c(evalNMCS, getEvalValues(resFrogs$NMCS))
evalNRPA <- c()
evalNRPA <- c(evalNRPA, getEvalValues(resZelda$NRPA))
evalNRPA <- c(evalNRPA, getEvalValues(resSokoban$NRPA))
evalNRPA <- c(evalNRPA, getEvalValues(resAliens$NRPA))
evalNRPA <- c(evalNRPA, getEvalValues(resFrogs$NRPA))
evalValues <- data.frame(evalMCTS, evalNMCS, evalNRPA)
durMCTS <- c()
durMCTS <- c(durMCTS, getDurValues(resZelda$MCTS))
durMCTS <- c(durMCTS, getDurValues(resSokoban$MCTS))
durMCTS <- c(durMCTS, getDurValues(resAliens$MCTS))
durMCTS <- c(durMCTS, getDurValues(resFrogs$MCTS))
durNMCS <- c()
durNMCS <- c(durNMCS, getDurValues(resZelda$NMCS))
durNMCS <- c(durNMCS, getDurValues(resSokoban$NMCS))
durNMCS <- c(durNMCS, getDurValues(resAliens$NMCS))
durNMCS <- c(durNMCS, getDurValues(resFrogs$NMCS))
durNRPA <- c()
durNRPA <- c(durNRPA, getDurValues(resZelda$NRPA))
durNRPA <- c(durNRPA, getDurValues(resSokoban$NRPA))
durNRPA <- c(durNRPA, getDurValues(resAliens$NRPA))
durNRPA <- c(durNRPA, getDurValues(resFrogs$NRPA))
durValues <- data.frame(durMCTS, durNMCS, durNRPA)
#boxplot(maxValues)
#boxplot(evalValues)
#boxplot(durValues)
means <- sapply(durValues, mean)
stdev <- sqrt(sapply(durValues, var))
n     <- sapply(durValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(durValues$durMCTS)
#maxDurMCTS_tmp <- max(durValues$durMCTS)
require(plotrix)
#boxplot(durValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Duration (in minutes)",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means <- sapply(evalValues, mean)
stdev <- sqrt(sapply(evalValues, var))
n     <- sapply(evalValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(evalValues$durMCTS)
#maxDurMCTS_tmp <- max(evalValues$durMCTS)
require(plotrix)
#boxplot(evalValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means <- sapply(maxValues, mean)
stdev <- sqrt(sapply(maxValues, var))
n     <- sapply(maxValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(maxValues$durMCTS)
#maxDurMCTS_tmp <- max(maxValues$durMCTS)
require(plotrix)
#boxplot(maxValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),ylab="Highest score",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
surveyResults <- read.table("Level Generation Survey.csv", header = TRUE, sep = ",")
tableSize <- length(surveyResults$Zeitstempel)
imprVSrandom_pref <- 0
gaVSrandom_pref <- 0
mctsVSrandom_pref <- 0
gaVSimpr_pref <- 0
mctsVSimpr_pref <- 0
mctsVSga_pref <- 0
imprVSrandom_notPref <- 0
gaVSrandom_notPref <- 0
mctsVSrandom_notPref <- 0
gaVSimpr_notPref <- 0
mctsVSimpr_notPref <- 0
mctsVSga_notPref <- 0
imprVSrandom_equal <- 0
gaVSrandom_equal <- 0
mctsVSrandom_equal <- 0
gaVSimpr_equal <- 0
mctsVSimpr_equal <- 0
mctsVSga_equal <- 0
imprVSrandom_neither <- 0
gaVSrandom_neither <- 0
mctsVSrandom_neither <- 0
gaVSimpr_neither <- 0
mctsVSimpr_neither <- 0
mctsVSga_neither <- 0
for (i in 1:tableSize) {
if(surveyResults$preference[i] == "First"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
if(surveyResults$secondGenerator[i] == "improvedConstructiveLevelGenerator"){
imprVSrandom_notPref = imprVSrandom_notPref +1;
}else if(surveyResults$secondGenerator[i] == "geneticLevelGenerator"){
gaVSrandom_notPref = gaVSrandom_notPref +1;
}else if(surveyResults$secondGenerator[i] == "mctsLevelGenerator"){
mctsVSrandom_notPref = mctsVSrandom_notPref +1;
}
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator") {
if(surveyResults$secondGenerator[i] == "randomLevelGenerator"){
imprVSrandom_pref = imprVSrandom_pref +1;
}else if(surveyResults$secondGenerator[i] == "geneticLevelGenerator"){
gaVSimpr_notPref = gaVSimpr_notPref +1;
}else if(surveyResults$secondGenerator[i] == "mctsLevelGenerator"){
mctsVSimpr_notPref = mctsVSimpr_notPref +1;
}
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
if(surveyResults$secondGenerator[i] == "randomLevelGenerator"){
gaVSrandom_pref = gaVSrandom_pref +1;
}else if(surveyResults$secondGenerator[i] == "improvedConstructiveLevelGenerator"){
gaVSimpr_pref = gaVSimpr_pref +1;
}else if(surveyResults$secondGenerator[i] == "mctsLevelGenerator"){
mctsVSga_notPref = mctsVSga_notPref +1;
}
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
if(surveyResults$secondGenerator[i] == "randomLevelGenerator"){
mctsVSrandom_pref = mctsVSrandom_pref +1;
}else if(surveyResults$secondGenerator[i] == "improvedConstructiveLevelGenerator"){
mctsVSimpr_pref = mctsVSimpr_pref +1;
}else if(surveyResults$secondGenerator[i] == "geneticLevelGenerator"){
mctsVSga_pref = mctsVSga_pref +1;
}
}
} else if(surveyResults$preference[i] == "Second"){
if(surveyResults$secondGenerator[i] == "randomLevelGenerator"){
if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
imprVSrandom_notPref = imprVSrandom_notPref +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSrandom_notPref = gaVSrandom_notPref +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSrandom_notPref = mctsVSrandom_notPref +1;
}
}else if(surveyResults$secondGenerator[i] == "improvedConstructiveLevelGenerator") {
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
imprVSrandom_pref = imprVSrandom_pref +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSimpr_notPref = gaVSimpr_notPref +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSimpr_notPref = mctsVSimpr_notPref +1;
}
}else if(surveyResults$secondGenerator[i] == "geneticLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
gaVSrandom_pref = gaVSrandom_pref +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
gaVSimpr_pref = gaVSimpr_pref +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSga_notPref = mctsVSga_notPref +1;
}
}else if(surveyResults$secondGenerator[i] == "mctsLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
mctsVSrandom_pref = mctsVSrandom_pref +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
mctsVSimpr_pref = mctsVSimpr_pref +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
mctsVSga_pref = mctsVSga_pref +1;
}
}
} else if(surveyResults$preference[i] == "Equal"){
if(surveyResults$secondGenerator[i] == "randomLevelGenerator"){
if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
imprVSrandom_equal = imprVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSrandom_equal = gaVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSrandom_equal = mctsVSrandom_equal +1;
}
}else if(surveyResults$secondGenerator[i] == "improvedConstructiveLevelGenerator") {
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
imprVSrandom_equal = imprVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSimpr_equal = gaVSimpr_equal +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSimpr_equal = mctsVSimpr_equal +1;
}
}else if(surveyResults$secondGenerator[i] == "geneticLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
gaVSrandom_equal = gaVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
gaVSimpr_equal = gaVSimpr_equal +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSga_equal = mctsVSga_equal +1;
}
}else if(surveyResults$secondGenerator[i] == "mctsLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
mctsVSrandom_equal = mctsVSrandom_equal +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
mctsVSimpr_equal = mctsVSimpr_equal +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
mctsVSga_equal = mctsVSga_equal +1;
}
}
}else if(surveyResults$preference[i] == "Neither"){
if(surveyResults$secondGenerator[i] == "randomLevelGenerator"){
if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
imprVSrandom_neither = imprVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSrandom_neither = gaVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSrandom_neither = mctsVSrandom_neither +1;
}
}else if(surveyResults$secondGenerator[i] == "improvedConstructiveLevelGenerator") {
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
imprVSrandom_neither = imprVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
gaVSimpr_neither = gaVSimpr_neither +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSimpr_neither = mctsVSimpr_neither +1;
}
}else if(surveyResults$secondGenerator[i] == "geneticLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
gaVSrandom_neither = gaVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
gaVSimpr_neither = gaVSimpr_neither +1;
}else if(surveyResults$firstGenerator[i] == "mctsLevelGenerator"){
mctsVSga_neither = mctsVSga_neither +1;
}
}else if(surveyResults$secondGenerator[i] == "mctsLevelGenerator"){
if(surveyResults$firstGenerator[i] == "randomLevelGenerator"){
mctsVSrandom_neither = mctsVSrandom_neither +1;
}else if(surveyResults$firstGenerator[i] == "improvedConstructiveLevelGenerator"){
mctsVSimpr_neither = mctsVSimpr_neither +1;
}else if(surveyResults$firstGenerator[i] == "geneticLevelGenerator"){
mctsVSga_neither = mctsVSga_neither +1;
}
}
}
}
imprVSrandom <- imprVSrandom_notPref + imprVSrandom_pref
gaVSrandom <- gaVSrandom_notPref + gaVSrandom_pref
mctsVSrandom <- mctsVSrandom_notPref + mctsVSrandom_pref
gaVSimpr <- gaVSimpr_notPref + gaVSimpr_pref
mctsVSimpr <- mctsVSimpr_notPref + mctsVSimpr_pref
mctsVSga <- mctsVSga_notPref + mctsVSga_pref
binom.test(imprVSrandom_pref,imprVSrandom,(1/2),alternative="two.sided")
binom.test(gaVSrandom_pref,gaVSrandom,(1/2),alternative="two.sided")
binom.test(mctsVSrandom_pref,mctsVSrandom,(1/2),alternative="two.sided")
binom.test(gaVSimpr_pref,gaVSimpr,(1/2),alternative="two.sided")
binom.test(mctsVSimpr_pref,mctsVSimpr,(1/2),alternative="two.sided")
binom.test(mctsVSga_pref,mctsVSga,(1/2),alternative="two.sided")
as.factor(surveyResults$ID)
count
count()
summary(as.factor(surveyResults$ID))
summary(as.factor(surveyResults$ID))
summary(as.factor(surveyResults$ID))[[1]]
summary(as.factor(surveyResults$ID))[[2]]
summary(as.factor(surveyResults$ID))
sapply(summary(as.factor(surveyResults$ID)), function(x) {x/6}
)
sapply(summary(as.factor(surveyResults$ID)), function(x) {as.integer(x/6)})
sum(sapply(summary(as.factor(surveyResults$ID)), function(x) {as.integer(x/6)}))
#boxplot(maxValues)
#boxplot(evalValues)
#boxplot(durValues)
means <- sapply(durValues, mean)
stdev <- sqrt(sapply(durValues, var))
n     <- sapply(durValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(durValues$durMCTS)
#maxDurMCTS_tmp <- max(durValues$durMCTS)
require(plotrix)
#boxplot(durValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Duration (in minutes)",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Duration (in minutes)",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means <- sapply(evalValues, mean)
stdev <- sqrt(sapply(evalValues, var))
n     <- sapply(evalValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(evalValues$durMCTS)
#maxDurMCTS_tmp <- max(evalValues$durMCTS)
require(plotrix)
#boxplot(evalValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means <- sapply(evalValues, mean)
stdev <- sqrt(sapply(evalValues, var))
n     <- sapply(evalValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(evalValues$durMCTS)
#maxDurMCTS_tmp <- max(evalValues$durMCTS)
require(plotrix)
#boxplot(evalValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means <- sapply(evalValues, mean)
stdev <- sqrt(sapply(evalValues, var))
n     <- sapply(evalValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(evalValues$durMCTS)
#maxDurMCTS_tmp <- max(evalValues$durMCTS)
require(plotrix)
#boxplot(evalValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
#boxplot(evalValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
#boxplot(evalValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),  ylab="Number of rollouts",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
means <- sapply(maxValues, mean)
stdev <- sqrt(sapply(maxValues, var))
n     <- sapply(maxValues,length)
ciw   <- qt(0.975, n-1) * stdev / sqrt(n)
#minDurMCTS_tmp <- min(maxValues$durMCTS)
#maxDurMCTS_tmp <- max(maxValues$durMCTS)
require(plotrix)
#boxplot(maxValues, xaxt="n")
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),ylab="Highest score",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
plotCI(x=means, uiw=ciw, xaxt="n", xlim=c(0.5,3.5),ylab="Highest score",xlab="")
axis(side=1, at=1:3, labels=c("MCTS", "NMCS", "NRPA"), cex=0.7)
grid()
